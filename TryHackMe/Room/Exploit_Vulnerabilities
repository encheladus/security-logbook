# [Exploit Vulnerabilities] — TryHackMe - Junior Pentester  
**Date:** 2025-10-08  
**Type:** Classroom  
**Scope:** Lab / Authorized only

---

## 1) Context  
Study the balance between **automated vulnerability scanners** and **manual research/exploitation techniques**. Learn to use databases (Exploit-DB, Rapid7, GitHub, Searchsploit) responsibly and understand how professionals transition from scanning to exploit development in a controlled, ethical environment.

## 2) Initial hypothesis  
Automated scanners (Nessus, OpenVAS) are efficient for discovery, but expert pentesters rely on **manual verification and research** for real impact. I want to learn when to switch from automation to manual testing, how to find reliable PoCs, and how to safely adapt exploits in a lab.

## 3) Tools used  
Nessus, OpenVAS, Metasploit, nmap, Burp Suite, fuzzers, Hydra (credential testing), Searchsploit, GitHub, Rapid7 database, Exploit-DB.

## 4) Approach (high level)  
- Compared **automated scanning** vs **manual validation**: speed vs precision.  
- Learned when to apply each method in a pentest workflow.  
- Catalogued tool categories (scanner, exploit framework, fuzzer, repo).  
- Practiced integrating both methods: scan → prioritize → verify → exploit → report.  
- Studied main public exploit sources (Rapid7, GitHub, Searchsploit) and how to vet PoCs.  
- Documented responsible usage: always within scope, in isolated lab setups.

## 5) Results / Evidence (sanitized)  
- Automated scanners quickly identified known CVEs and misconfigurations.  
- Manual testing confirmed exploitability, found false positives, and chained smaller findings.  
- Searchsploit and GitHub searches produced relevant PoCs requiring adaptation.  
- Rapid7 and Exploit-DB provided verified Metasploit modules and research notes.  
- Combining automation with manual reasoning yielded complete and validated results.

## 6) Recommended remediation  
- Use scanners for **breadth and repeatability**, manual work for **depth and context**.  
- Verify scanner findings manually to eliminate false positives.  
- Keep tools **updated** (Exploit-DB mirror, plugins, definitions).  
- Maintain an **internal exploit library** with references and usage notes.  
- Enforce **authorization boundaries** and isolate testing environments.  
- Regularly review **new exploit sources** to track emerging vulnerabilities.

## 7) Lessons learned  
- Automation ≠ certainty — human review ensures accuracy.  
- The best pentests mix **speed, precision, and ethical awareness**.  
- Exploit repositories differ in quality; always validate code before use.  
- Manual exploration uncovers **logic flaws and chained exploits** scanners miss.  
- Ethical and legal boundaries define professional pentesting.  
- Documentation of methods and evidence is part of responsible disclosure.

## 8) Links / Resources  
- [Exploit-DB](https://www.exploit-db.com/)  
- [Rapid7 Vulnerability & Exploit Database](https://www.rapid7.com/db/)  
- [GitHub](https://github.com/) — search for “PoC”, “exploit”, “CVE-XXXX-XXXX”  
- [Searchsploit (Offline Exploit-DB Mirror)](https://www.exploit-db.com/searchsploit)  
- [Nessus](https://www.tenable.com/products/nessus) / [OpenVAS](https://www.openvas.org/)  
- [Metasploit Framework](https://www.metasploit.com/)

---