# LDAP Injection — TryHackMe - Web Application Pentesting  
**Date:** 2025-10-27  
**Type:** TryHackMe (Classroom)  
**Scope:** Lab / Authorized only

---

## 1) Context
**Short summary (1–3 lines):**  
Hands-on lab exploring Lightweight Directory Access Protocol (LDAP) and how unsanitized inputs can lead to LDAP Injection. Objective: understand LDAP structure and filters, detect injection points (including blind cases), and practice exploitation and mitigation techniques.

## 2) Initial hypothesis
What I expected before starting: LDAP is used for authentication and directory lookups (e.g., Active Directory/OpenLDAP). I knew injection existed conceptually (similar to SQLi) but hadn’t fully grasped how LDAP filters could be manipulated in practice to bypass auth or leak data.

## 3) Tools used
Short list: a browser, Burp Suite (intercept/repeater), ldapsearch (conceptual), Python + requests + BeautifulSoup for automation, and auxiliary scripting.  
— **do not** include options, credentials, or sensitive scripts.

## 4) Approach (high level)
- Map directory concepts (DN, RDN, OUs, attributes) and identify likely LDAP entry points (login forms, search fields, SSO endpoints).
- Probe responses for signs of LDAP-driven logic (differences in success/failure pages, errors, or timing).
- Inject minimal test payloads (wildcards `*`, logical operators `|`, `&`, `!`) to observe how filters change results.
- For blind scenarios, iterate character-by-character using crafted probe patterns and infer matches from response behavior.
- When feasible, adapt payloads to cause deterministic server-side effects (e.g., cause a filter to become a tautology) and verify impact.

## 5) Results / Evidence (sanitized)
What I observed:
- Detection: injecting simple wildcard/tautology payloads changed application responses (e.g., success page shown when password was incorrect), confirming injection points.
- Authentication bypass: crafted inputs that altered filters (example pattern: `admin*)(|(&`) caused the application to accept authentication without the correct password.  
- Blind extraction: iteratively probing the `username` field and analyzing small response differences allowed progressive discovery of existent attribute values.  
- Example sanitized evidence: *final state: login endpoint returned authenticated page after injecting a tautology-based payload; blind script reconstructed part of a username via response inference.*

## 6) Recommended remediation
Generic technical measures:
- **Escape LDAP special characters** before inserting user input into filters: `\`-escape `(`, `)`, `*`, `\`, `|`, `&`, etc.
- **Use parameterized/templated LDAP queries** (API methods that accept parameters instead of building filter strings manually).
- **Validate input** with allowlists and strict schemas (reject unexpected characters).
- **Principle of least privilege**: web app LDAP binds should use minimal privileges and never admin-level credentials for general lookups.
- **Limit result handling**: avoid trusting the first matched entry without additional validation; require explicit password verification steps.
- **Monitor & rate-limit** suspicious query patterns (blind enumeration attempts).
- **Audit** code paths that build dynamic filters (login, search, account management) and review logs for anomalous filter-like inputs.

## 7) Lessons learned
- LDAP filters are a query language: injection operates by changing filter logic rather than SQL-like strings.
- Common attacker primitives: wildcards (`*`), logical operators (`&`, `|`, `!`), and crafted parentheses to close/open filter contexts.
- Tautology-based payloads (e.g., appending conditions that are always true) are effective for authentication bypass when input is concatenated into filters.
- Blind LDAP is slower but practical: infer presence/values from behavioral differences (content, errors, timing).
- Argument/parenthesis syntax matters — small mistakes can break the exploit or the application’s parser.
- Automated scripts help (character-by-character extraction) but require careful tuning (success criteria, rate limits, error handling).

## 8) Links / Resources
- TryHackMe — *Web Application Pentesting* (Classroom)  
- OpenLDAP / Active Directory docs (for LDIF, DN, and search semantics)  
- Notion / detailed write-up (public): *(add your public write-up link here if available)*

---

## Appendix — Quick cheatsheet (sanitized)
- LDAP search components: **Base DN** | **Scope** (`base`/`one`/`sub`) | **Filter** | **Attributes**  
- Filter examples:
  - `(cn=John Doe)` — exact match
  - `(cn=J*)` — prefix wildcard
  - `(&(objectClass=person)(|(cn=admin)(uid=admin)))` — combined AND/OR
- Common exploit patterns:
  - Tautology injection: `admin*)(|(&` → closes filter and appends always-true clause
  - Wildcard abuse: `(uid=*)` → matches any uid if unchecked
- Defenses: escape `(` `)` `*` `\` `|` `&`, use parameterized queries, least privilege, and strong input validation.
